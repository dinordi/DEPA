classDiagram
    direction LR

    class Circuit {
        <<Circuit>>
        "Representeerd het gehele digitale circuit"
        +List<Component> components
        +List<Edge> edges
        +addComponent(Component c)
        +addEdge(Edge e)
        +getComponent(string id) Component
    }

    class Component {
        <<abstract>>
        "Abstracte basis voor alle circuit elementen"
        +string id
        +int propagationDelay
        +bool outputValue
        +calculateOutput()* bool
        +clone()* Component  // Toegevoegd voor Prototype pattern
    }

    class LogicGate {
        <<abstract>>
        "Abstract basis voor logic gates"
        +calculateOutput() bool
        // clone() wordt geërfd en geïmplementeerd door concrete gates
    }

    class Input {
        <<Input Source>>
        "Externe input bron voor het circuit"
        +setValue(bool value)
        +calculateOutput() bool
        +clone() Component // Implementeert clone
    }

    class Probe {
        <<Measurement Point>>
        "Luistert signaal value op een bepaald punt"
        +bool recordedValue
        +recordValue(bool value)
        +calculateOutput() bool
        +clone() Component // Implementeert clone
    }

    class ANDGate {
        "Implementeerd AND logic"
        +clone() Component // Implementeert clone
    }
    class ORGate {
        "Implementeerd OR logic"
        +clone() Component // Implementeert clone
    }
    class NOTGate {
        "Implementeerd NOT logic"
        +clone() Component // Implementeert clone
    }
    class NANDGate {
        "Implementeerd NAND logic"
        +clone() Component // Implementeert clone
    }
    class NORGate {
        "Implementeerd NOR logic"
        +clone() Component // Implementeert clone
    }
    class XORGate {
        "Implementeerd XOR logic"
        +clone() Component // Implementeert clone
    }

    class Edge {
        <<Connection>>
        "Representeerd een verbinding tussen componenten"
        +Component source
        +Component target
    }

    class Simulator {
        <<Simulation Engine>>
        "Beheert de simulatie"
        +Circuit circuit
        +InputFileHandler inputFileHandler
        +OutputHandler outputHandler
        +simulate()
    }

    class ComponentFactory {
        <<Prototype Factory>>
        "Creëert componenten door prototypes te klonen en te initialiseren"
        -Map<string, Component> prototypes
        +registerPrototype(string key, Component prototype)
        +createComponent(string key, string id, int propagationDelay) Component
    }

    class InputFileHandler {
        <<File Parser>>
        "Leest circuit definities uit een bestand"
        -ComponentFactory componentFactory // Afhankelijkheid van factory
        +readCircuit(string filename) Circuit
    }

    class OutputHandler {
        <<Result Writer>>
        "Schrijft de resultaten naar een bestand of console"
        +writeResults(List<Probe> probes)
    }

    Circuit "1" *-- "*" Component : bevat
    Circuit "1" *-- "*" Edge : bevat

    Component <|-- LogicGate
    Component <|-- Input
    Component <|-- Probe

    LogicGate <|-- ANDGate
    LogicGate <|-- ORGate
    LogicGate <|-- NOTGate
    LogicGate <|-- NANDGate
    LogicGate <|-- NORGate
    LogicGate <|-- XORGate

    Edge "1" -- "1" Component : source
    Edge "1" -- "1" Component : target

    Simulator "1" -- "1" Circuit : simuleert
    Simulator "1" -- "1" InputFileHandler : gebruikt
    Simulator "1" -- "1" OutputHandler : gebruikt
    Simulator "1" -- "1" ComponentFactory : initialiseert/gebruikt (optioneel, voor registratie prototypes)


    InputFileHandler "1" -- "1" ComponentFactory : gebruikt
    InputFileHandler "1" -- "1" Circuit : creëert
    OutputHandler "1" -- "*" Probe : rapporteert over
    ComponentFactory ..> Component : creëert (via clone)